import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:sardordev/core/utils/pref_utils.dart';
import 'package:sardordev/core/utils/size_config.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              10,
            ),
          ),
        ),
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: getFontSize(
            26,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: getFontSize(
            10,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        bodyLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    background: Color(0XFF292929),
    error: Color(0XFF111827),
    errorContainer: Color(0XFF056EA1),
    inversePrimary: Color(0XFF292929),
    inverseSurface: Color(0XFF111827),
    onBackground: Color(0XFFFDE7E8),
    onError: Color(0XFFEE8E00),
    onErrorContainer: Color(0XFF111827),
    onInverseSurface: Color(0XFFEE8E00),
    onPrimary: Color(0XFF111827),
    onPrimaryContainer: Color(0XFFFDE7E8),
    onSecondary: Color(0XFFFDE7E8),
    onSecondaryContainer: Color(0XFF111827),
    onSurface: Color(0XFFFDE7E8),
    onSurfaceVariant: Color(0XFF111827),
    onTertiary: Color(0XFFFDE7E8),
    onTertiaryContainer: Color(0XFF111827),
    outline: Color(0XFF111827),
    outlineVariant: Color(0XFF292929),
    primary: Color(0XFF009FEE),
    primaryContainer: Color(0XFF292929),
    scrim: Color(0XFF292929),
    secondary: Color(0XFF292929),
    secondaryContainer: Color(0XFF959595),
    shadow: Color(0XFF111827),
    surface: Color(0XFF292929),
    surfaceTint: Color(0XFF111827),
    surfaceVariant: Color(0XFF959595),
    tertiary: Color(0XFF292929),
    tertiaryContainer: Color(0XFF959595),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);
  // BlueGray
  Color get blueGray400 => Color(0XFF888888);
  // DeepOrange
  Color get deepOrange100 => Color(0XFFF6CFC6);
  Color get deepOrange900 => Color(0XFFBF2200);
  Color get deepOrangeA700 => Color(0XFFEE2A00);
  // Gray
  Color get gray100 => Color(0XFFF3F4F6);
  Color get gray200 => Color(0XFFEFEFEF);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray500 => Color(0XFF999999);
  Color get gray600 => Color(0XFF7C7B7B);
  Color get gray60001 => Color(0XFF6B7280);
  // LightBlue
  Color get lightBlue900 => Color(0XFF056DA1);
  // Orange
  Color get orange900 => Color(0XFFB76E00);
  // Red
  Color get redA700 => Color(0XFFFF0000);
  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
